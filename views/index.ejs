<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
  </head>
  <body>
    <button>join</button>
    <script src="https://cdn.socket.io/3.1.3/socket.io.min.js"></script>
    <script>
      const socket = io("/");
      const usersInSessions = [];
      let session;
      let audio = document.querySelector("audio");
      let joinButton = document.querySelector("button");
      let localConnection = new RTCPeerConnection();

      socket.on("joined-session", (newSession) => {
        session = newSession;
        localConnection.onicecandidate = ({ candidate }) => {
          candidate &&
            socket.emit("candidate", {
              socket_id: session.socket_id,
              candidate,
            });
        };
        localConnection.ontrack = ({ streams: [stream] }) => {
          //audio.srcObject = stream;
          joinButton.addEventListener("click", () => {
            var ctx = new AudioContext();
            var audiot = new Audio();
            audiot.srcObject = stream;
            var gainNode = ctx.createGain();
            gainNode.gain.value = 1;
            audiot.onloadedmetadata = function () {
              var source = ctx.createMediaStreamSource(audiot.srcObject);
              audiot.play();
              audiot.muted = true;
              source.connect(gainNode);
              gainNode.connect(ctx.destination);
            };
          });
        };
        localConnection
          .createOffer({ offerToReceiveAudio: true, offerToReceiveVideo: true })
          .then((offer) => localConnection.setLocalDescription(offer))
          .then(() => {
            console.log(localConnection.localDescription);
            socket.emit("offer", {
              session_id: location.pathname.replace("/", ""),
              description: localConnection.localDescription,
            });
          });
        socket.on("answer", (answer) => {
          console.log("received answer");
          localConnection.setRemoteDescription(answer.description);
        });

        socket.on("candidate", (candidate) => {
          const conn = localConnection;
          conn.addIceCandidate(new RTCIceCandidate(candidate));
        });
      });
      socket.emit("join-session", {
        session_id: location.pathname.replace("/", ""),
      });
    </script>
  </body>
</html>
